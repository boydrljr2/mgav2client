import React, { useState } from 'react';
import { useFieldArray, useFormContext,  Controller } from 'react-hook-form';
import _ from 'lodash';

import { Paper, Box, Collapse, IconButton, Grid, Button, Typography, TextField, Switch, FormControlLabel,
        TableContainer, Table, TableHead, TableBody, TableRow, TableCell, } from '@mui/material';

import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';

import { AutoValues } from '../Scaffold/MGAValues';

import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';

//---------- Coverage Table Function component ----------
export default function CoverageTable () {

    const {control, formState: {errors}} = useFormContext();
    const [dense, setDense] = useState(false);
    const [open, setOpen] = useState(false);

    const { fields, append, remove } = useFieldArray({
        control,
        name: "autoUnits",
    });

    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {
        setDense(event.target.checked);
    };

    function CoverageRow(props: { row: AutoValues }) {
        const { row } = props;
        const [open, setOpen] = React.useState(false);
      
        return (
          <React.Fragment>
            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>
              <TableCell>
                <IconButton aria-label="expand row" size="small" onClick={() => setOpen(!open)}>
                  {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
                </IconButton>
              </TableCell>
              <TableCell component="th" scope="row">{row.unit}</TableCell>
              <TableCell align="right">{row.make}</TableCell>
              <TableCell align="right">{row.model}</TableCell>
              <TableCell align="right">{row.year}</TableCell>
              <TableCell align="right">{row.vin}</TableCell>
              <TableCell align="right">{row.effectiveDate.toLocaleString().split(',')[0]}</TableCell>
            </TableRow>
            <TableRow>
              <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>
                <Collapse in={open} timeout="auto" unmountOnExit>
                  <Box sx={{ margin: 1 }}>
                    <Typography variant="subtitle2" gutterBottom component="div">
                      Coverages
                    </Typography>
                    <Table size="small" aria-label="purchases">
                      <TableHead>
                        <TableRow>
                          <TableCell>Type</TableCell>
                          <TableCell>Limit</TableCell>
                          <TableCell align="right">Deductible</TableCell>
                          <TableCell align="right">Premium($)</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {row.coverages.map((coverages) => (
                          <TableRow key={index}>
                            <TableCell component="th" scope="row">
                              {row.unit}
                            </TableCell>
                            <TableCell>{row.make}</TableCell>
                            <TableCell align="right">{row.model}</TableCell>
                            <TableCell align="right">
                              {row.year}
                            </TableCell>
                            <TableCell align="right">
                              {row.vin}
                            </TableCell>
                            <TableCell align="right">
                              {row.effectiveDate.toLocaleDateString().split(',')[0]}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </Box>
                </Collapse>
              </TableCell>
            </TableRow>
          </React.Fragment>
        );
    }

    return (
        <React.Fragment>
            <TableContainer component={Paper}>
                <Table size={dense ? 'small' : 'medium'} aria-label="coverage table">
                    <TableBody>
                        {fields.map((item, index) => (
                            <TableRow key={item.id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                                <TableCell>
                                    <IconButton 
                                        aria-label="expand row" 
                                        size="small"
                                        sx={{maxWidth:'20px'}} 
                                        onClick={() => setOpen(!open)}>
                                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
                                    </IconButton>
                                </TableCell>
                                <TableCell >
                                    <Controller
                                        name={`autoUnits.${index}.unit`}
                                        control={control}
                                        render={({ field }) => (
                                            <TextField
                                                {...field}
                                                id="auto-number" label="Unit"
                                                variant="outlined" fullWidth 
                                                sx={{maxWidth: '50px'}}
                                            />
                                        )}
                                    />
                                </TableCell>
                                <TableCell >
                                    <Controller
                                        name={`autoUnits.${index}.make`}
                                        control={control}
                                        render={({ field }) => (
                                            <TextField
                                                {...field}
                                                id="auto-make" label="Make"
                                                variant="outlined" fullWidth 
                                            />
                                        )}
                                    />
                                </TableCell>                            
                                <TableCell >
                                    <Controller
                                        name={`autoUnits.${index}.model`}
                                        control={control}
                                        render={({ field }) => (
                                            <TextField
                                                {...field}
                                                id="auto-model" label="Model"
                                                variant="outlined" fullWidth 
                                            />
                                        )}
                                    />
                                </TableCell>                            
                                <TableCell >
                                    <Controller
                                        name={`autoUnits.${index}.year`}
                                        control={control}
                                        render={({ field }) => (
                                            <TextField
                                                {...field}
                                                id="auto-year" label="Year"
                                                variant="outlined" fullWidth 
                                            />
                                        )}
                                    />
                                </TableCell>
                                <TableCell  >
                                    <Controller
                                        name={`autoUnits.${index}.vin`}
                                        control={control}
                                        render={({ field }) => (
                                            <TextField
                                                {...field}
                                                id="auto-vin" label="VIN"
                                                variant="outlined" fullWidth 
                                                sx={{minWidth:'200px'}}
                                            />
                                        )}
                                    />
                                </TableCell>
                                <TableCell >
                                    <LocalizationProvider dateAdapter={AdapterDayjs} >
                                        <Controller
                                            name={`autoUnits.${index}.effectiveDate`}
                                            control={control}
                                            render={({ field: { ref, onBlur, name, ...field }, fieldState }) => (
                                            <DatePicker 
                                                {...field}
                                                inputRef={ref}
                                                label="Effective Date"
                                                renderInput={(inputProps) => (
                                                    <TextField 
                                                        {...inputProps}
                                                        variant="outlined" fullWidth 
                                                        sx={{minWidth:'150px'}}
                                                    />
                                                    )}
                                                />
                                            )}
                                        />
                                    </LocalizationProvider>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>

            </TableContainer>
            <FormControlLabel
                control={<Switch checked={dense} onChange={handleChangeDense} />}
                label="Dense"
            />
        </React.Fragment>
    )
}