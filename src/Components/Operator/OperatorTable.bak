import React from 'react';

import { useFormContext, Controller } from 'react-hook-form';
import _ from 'lodash';

import { styled } from '@mui/material/styles';
import { Paper, Box, Typography, Card, Button, Collapse, IconButton, Toolbar, Tooltip,
        Table, TableBody, TableCell, tableCellClasses, TableContainer, 
        TableHead, TableRow, TablePagination, TableSortLabel, FormControlLabel, Switch,
    } from '@mui/material';

import { visuallyHidden } from '@mui/utils';
import { alpha } from '@mui/material/styles';

import { OperatorValues, OperatorSchema, OperatorTableProps,
        } from '../Scaffold/MGAValues';

import { MGATableHeaderCell, MGATableRowCellCollapsible  } from '../Scaffold/TableParts/TableParts';



// ------ Operator Table Function component ------
export default function OperatorTable () {

    const { control, formState: { errors } = useFormContext();

    //Pagination & Density section
    const [order, setOrder] = React.useState<Order>(DEFAULT_ORDER);
    const [orderBy, setOrderBy] = React.useState<keyof Data>(DEFAULT_ORDER_BY);
    const [dense, setDense] = React.useState(false);
    const [visibleRows, setVisibleRows] = React.useState<Data[] | null>(null);
    const [paddingHeight, setPaddingHeight] = React.useState(0);

  const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {
      setDense(event.target.checked);
      };

    return (
        <Box sx={{ width: '100%' }}>
            <Paper sx={{ width: '100%', overflow: 'hidden' }}>
                {/* <TableToolbar numSelected={selected.length} /> */}
                <TableContainer sx={{ maxHeight: 800 }}>
                    <Table
                        sx={{ minWidth: 800 }} 
                        stickyHeader  aria-label='sticky table' 
                        size={dense ? 'small' : 'medium'}
                    >
                        <EnhancedTableHead
                            numSelected={selected.length}
                            order={order}
                            orderBy={orderBy}
                            onSelectAllClick={handleSelectAllClick}
                            onRequestSort={handleRequestSort}
                            rowCount={rows.length}
                        />
                        <TableBody>
                            {visibleRows 
                                ? visibleRows.map((row, index) => {
                                    return (
                                        <Row key={row.id} row={row} />
                                    )
                                })
                                : null
                            }
                            {paddingHeight > 0 && (
                                <TableRow style={{ height: paddingHeight }}>
                                    <TableCell colSpan={12} />
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </TableContainer>
                <TablePagination
                    rowsPerPageOptions={[5, 10, 15]}
                    component='div'
                    count={policyRows.length}
                    rowsPerPage={rowsPerPage}
                    page={page}
                    onPageChange={handleChangePage}
                    onRowsPerPageChange={handleChangeRowsPerPage}
                />
            </Paper>
            <FormControlLabel
                control={<Switch checked={dense} onChange={handleChangeDense} />}
                label='Dense'
            />
    </Box>
  )
}